'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var index = require('../../_virtual/index.js');
var PropTypes = require('prop-types');
var CFormControlWrapper = require('../form/CFormControlWrapper.js');
var CConditionalPortal = require('../conditional-portal/CConditionalPortal.js');
var CMultiSelectNativeSelect = require('./CMultiSelectNativeSelect.js');
var CMultiSelectOptions = require('./CMultiSelectOptions.js');
var CMultiSelectSelection = require('./CMultiSelectSelection.js');
var useDropdownWithPopper = require('../../hooks/useDropdownWithPopper.js');
require('@popperjs/core');
var getNextActiveElement = require('../../utils/getNextActiveElement.js');
var utils = require('./utils.js');

var CMultiSelect = React.forwardRef(function (_a, ref) {
    var _b;
    var allowCreateOptions = _a.allowCreateOptions, _c = _a.ariaCleanerLabel, ariaCleanerLabel = _c === void 0 ? 'Clear all selections' : _c, className = _a.className, _d = _a.cleaner, cleaner = _d === void 0 ? true : _d, clearSearchOnSelect = _a.clearSearchOnSelect, container = _a.container, disabled = _a.disabled, feedback = _a.feedback, feedbackInvalid = _a.feedbackInvalid, feedbackValid = _a.feedbackValid, id = _a.id, invalid = _a.invalid, label = _a.label, loading = _a.loading, _e = _a.multiple, multiple = _e === void 0 ? true : _e, name = _a.name, onChange = _a.onChange, onFilterChange = _a.onFilterChange, onHide = _a.onHide, onShow = _a.onShow, options = _a.options, _f = _a.optionsMaxHeight, optionsMaxHeight = _f === void 0 ? 'auto' : _f, _g = _a.optionsStyle, optionsStyle = _g === void 0 ? 'checkbox' : _g, optionsTemplate = _a.optionsTemplate, optionsGroupsTemplate = _a.optionsGroupsTemplate, _h = _a.placeholder, placeholder = _h === void 0 ? 'Select...' : _h, _j = _a.portal, portal = _j === void 0 ? false : _j, required = _a.required, _k = _a.resetSelectionOnOptionsChange, resetSelectionOnOptionsChange = _k === void 0 ? false : _k, _l = _a.search, search = _l === void 0 ? true : _l, _m = _a.searchNoResultsLabel, searchNoResultsLabel = _m === void 0 ? 'No results found' : _m, _o = _a.selectAll, selectAll = _o === void 0 ? true : _o, _p = _a.selectAllLabel, selectAllLabel = _p === void 0 ? 'Select all options' : _p, _q = _a.selectionType, selectionType = _q === void 0 ? 'tags' : _q, _r = _a.selectionTypeCounterText, selectionTypeCounterText = _r === void 0 ? 'item(s) selected' : _r, size = _a.size, text = _a.text, tooltipFeedback = _a.tooltipFeedback, valid = _a.valid, virtualScroller = _a.virtualScroller, _s = _a.visible, visible = _s === void 0 ? false : _s, _t = _a.visibleItems, visibleItems = _t === void 0 ? 10 : _t, rest = tslib_es6.__rest(_a, ["allowCreateOptions", "ariaCleanerLabel", "className", "cleaner", "clearSearchOnSelect", "container", "disabled", "feedback", "feedbackInvalid", "feedbackValid", "id", "invalid", "label", "loading", "multiple", "name", "onChange", "onFilterChange", "onHide", "onShow", "options", "optionsMaxHeight", "optionsStyle", "optionsTemplate", "optionsGroupsTemplate", "placeholder", "portal", "required", "resetSelectionOnOptionsChange", "search", "searchNoResultsLabel", "selectAll", "selectAllLabel", "selectionType", "selectionTypeCounterText", "size", "text", "tooltipFeedback", "valid", "virtualScroller", "visible", "visibleItems"]);
    var _u = useDropdownWithPopper.useDropdownWithPopper(), dropdownMenuElement = _u.dropdownMenuElement, dropdownRefElement = _u.dropdownRefElement, isOpen = _u.isOpen, closeDropdown = _u.closeDropdown, openDropdown = _u.openDropdown, toggleDropdown = _u.toggleDropdown, updatePopper = _u.updatePopper;
    var nativeSelectRef = React.useRef(null);
    var searchRef = React.useRef(null);
    var isInitialMount = React.useRef(true);
    var _v = React.useState(''), searchValue = _v[0], setSearchValue = _v[1];
    var _w = React.useState([]), selected = _w[0], setSelected = _w[1];
    var _x = React.useState([]), userOptions = _x[0], setUserOptions = _x[1];
    var filteredOptions = React.useMemo(function () {
        return utils.flattenOptionsArray(utils.isExternalSearch(search)
            ? tslib_es6.__spreadArray(tslib_es6.__spreadArray([], options, true), utils.filterOptionsList(searchValue, userOptions), true) : utils.filterOptionsList(searchValue, tslib_es6.__spreadArray(tslib_es6.__spreadArray([], options, true), userOptions, true)), true);
    }, [options, searchValue, userOptions]);
    var flattenedOptions = React.useMemo(function () { return utils.flattenOptionsArray(options); }, [options]);
    var userOption = React.useMemo(function () {
        if (allowCreateOptions &&
            filteredOptions.some(function (option) { return option.label && option.label.toLowerCase() === searchValue.toLowerCase(); })) {
            return false;
        }
        return searchRef.current && utils.createOption(String(searchValue), flattenedOptions);
    }, [filteredOptions, searchValue]);
    React.useEffect(function () {
        if (resetSelectionOnOptionsChange) {
            return setSelected([]);
        }
        var _selected = flattenedOptions.filter(function (option) { return option.selected === true; });
        var deselected = flattenedOptions.filter(function (option) { return option.selected === false; });
        if (_selected.length > 0) {
            setSelected(utils.selectOptions(multiple, _selected, selected, deselected));
        }
    }, [flattenedOptions]);
    React.useEffect(function () {
        !isInitialMount.current && onFilterChange && onFilterChange(searchValue);
    }, [searchValue]);
    React.useEffect(function () {
        if (!isInitialMount.current && nativeSelectRef.current) {
            nativeSelectRef.current.dispatchEvent(new Event('change', { bubbles: true }));
        }
        updatePopper();
    }, [JSON.stringify(selected)]);
    React.useEffect(function () {
        visible ? openDropdown() : closeDropdown();
    }, [visible]);
    React.useEffect(function () {
        var _a;
        if (isOpen) {
            if (onShow)
                onShow();
            if (portal && dropdownMenuElement.current && dropdownRefElement.current) {
                dropdownMenuElement.current.style.minWidth = "".concat(dropdownRefElement.current.offsetWidth, "px");
            }
            (_a = searchRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }
        return function () {
            if (onHide)
                onHide();
            setSearchValue('');
            if (searchRef.current) {
                searchRef.current.value = '';
            }
        };
    }, [isOpen]);
    React.useEffect(function () {
        isInitialMount.current = false;
    }, []);
    var handleSearchChange = function (event) {
        setSearchValue(event.target.value);
    };
    var handleSearchKeyDown = function (event) {
        if (!isOpen) {
            openDropdown();
        }
        if (event.key === 'ArrowDown' &&
            dropdownMenuElement.current &&
            searchRef.current &&
            searchRef.current.value.length === searchRef.current.selectionStart) {
            event.preventDefault();
            var items = utils.getOptionsList(dropdownMenuElement.current);
            var target = event.target;
            getNextActiveElement.default(items, target, event.key === 'ArrowDown', !items.includes(target)).focus();
            return;
        }
        if (event.key === 'Enter' && searchValue && allowCreateOptions) {
            event.preventDefault();
            if (userOption) {
                setSelected(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], selected, true), userOption, true));
                setUserOptions(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], userOptions, true), userOption, true));
            }
            if (!userOption) {
                setSelected(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], selected, true), [
                    filteredOptions.find(function (option) { return String(option.label).toLowerCase() === searchValue.toLowerCase(); }),
                ], false));
            }
            setSearchValue('');
            if (searchRef.current) {
                searchRef.current.value = '';
            }
            return;
        }
        if (searchValue.length > 0) {
            return;
        }
        if (event.key === 'Backspace' || event.key === 'Delete') {
            var last_1 = selected.filter(function (option) { return !option.disabled; }).pop();
            if (last_1) {
                setSelected(selected.filter(function (option) { return option.value !== last_1.value; }));
            }
        }
    };
    var handleTogglerKeyDown = function (event) {
        if (!isOpen && (event.key === 'Enter' || event.key === 'ArrowDown')) {
            event.preventDefault();
            openDropdown();
            return;
        }
        if (isOpen && dropdownMenuElement.current && event.key === 'ArrowDown') {
            event.preventDefault();
            var items = utils.getOptionsList(dropdownMenuElement.current);
            var target = event.target;
            getNextActiveElement.default(items, target, event.key === 'ArrowDown', !items.includes(target)).focus();
        }
    };
    var handleGlobalSearch = function (event) {
        if (utils.isGlobalSearch(search) &&
            searchRef.current &&
            (event.key.length === 1 || event.key === 'Backspace' || event.key === 'Delete')) {
            searchRef.current.focus();
        }
    };
    var handleOnOptionClick = function (option) {
        if (!multiple) {
            setSelected([option]);
            closeDropdown();
            setSearchValue('');
            if (searchRef.current) {
                searchRef.current.value = '';
            }
            return;
        }
        if (option.custom && !userOptions.some(function (_option) { return _option.value === option.value; })) {
            setUserOptions(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], userOptions, true), [option], false));
        }
        if (clearSearchOnSelect || option.custom) {
            setSearchValue('');
            if (searchRef.current) {
                searchRef.current.value = '';
                searchRef.current.focus();
            }
        }
        if (selected.some(function (_option) { return _option.value === option.value; })) {
            setSelected(selected.filter(function (_option) { return _option.value !== option.value; }));
        }
        else {
            setSelected(tslib_es6.__spreadArray(tslib_es6.__spreadArray([], selected, true), [option], false));
        }
    };
    var handleSelectAll = function () {
        setSelected(utils.selectOptions(multiple, tslib_es6.__spreadArray(tslib_es6.__spreadArray([], flattenedOptions.filter(function (option) { return !option.disabled; }), true), userOptions, true), selected));
    };
    var handleDeselectAll = function () {
        setSelected(selected.filter(function (option) { return option.disabled; }));
    };
    return (React.createElement(CFormControlWrapper.CFormControlWrapper, { describedby: rest['aria-describedby'], feedback: feedback, feedbackInvalid: feedbackInvalid, feedbackValid: feedbackValid, id: id, invalid: invalid, label: label, text: text, tooltipFeedback: tooltipFeedback, valid: valid },
        React.createElement(CMultiSelectNativeSelect.CMultiSelectNativeSelect, { id: id, multiple: multiple, name: name, options: selected, required: required, value: multiple
                ? selected.map(function (option) { return option.value.toString(); })
                : selected.map(function (option) { return option.value; })[0], onChange: function () { return onChange && onChange(selected); }, ref: nativeSelectRef }),
        React.createElement("div", { className: index.default('form-multi-select', (_b = {},
                _b["form-multi-select-".concat(size)] = size,
                _b.disabled = disabled,
                _b['is-invalid'] = invalid,
                _b['is-valid'] = valid,
                _b.show = isOpen,
                _b), className), onKeyDown: handleGlobalSearch, "aria-expanded": isOpen, ref: ref },
            React.createElement("div", tslib_es6.__assign({ className: "form-multi-select-input-group" }, (!search && !disabled && { tabIndex: 0 }), { onClick: function () { return !disabled && openDropdown(); }, onKeyDown: handleTogglerKeyDown, ref: dropdownRefElement }),
                React.createElement(CMultiSelectSelection.CMultiSelectSelection, { disabled: disabled, multiple: multiple, onRemove: function (option) { return !disabled && handleOnOptionClick(option); }, placeholder: placeholder, search: search, selected: selected, selectionType: selectionType, selectionTypeCounterText: selectionTypeCounterText },
                    search && (React.createElement("input", tslib_es6.__assign({ type: "text", className: "form-multi-select-search", disabled: disabled, autoComplete: "off", onChange: handleSearchChange, onKeyDown: handleSearchKeyDown }, (selected.length === 0 && { placeholder: placeholder }), (selected.length > 0 &&
                        selectionType === 'counter' && {
                        placeholder: "".concat(selected.length, " ").concat(selectionTypeCounterText),
                    }), (selected.length > 0 &&
                        !multiple && { placeholder: selected.map(function (option) { return option.label; })[0] }), (multiple &&
                        selected.length > 0 &&
                        selectionType !== 'counter' && { size: searchValue.length + 2 }), { ref: searchRef }))),
                    !search && selected.length === 0 && (React.createElement("span", { className: "form-multi-select-placeholder" }, placeholder))),
                React.createElement("div", { className: "form-multi-select-buttons" },
                    !disabled && cleaner && selected.length > 0 && (React.createElement("button", { type: "button", className: "form-multi-select-cleaner", onClick: function () { return handleDeselectAll(); }, "aria-label": ariaCleanerLabel })),
                    React.createElement("button", tslib_es6.__assign({ type: "button", className: "form-multi-select-indicator", onClick: function (event) {
                            event.preventDefault();
                            event.stopPropagation();
                            if (!disabled) {
                                toggleDropdown();
                            }
                        } }, (disabled && { tabIndex: -1 }))))),
            React.createElement(CConditionalPortal.CConditionalPortal, { container: container, portal: portal },
                React.createElement("div", { className: index.default('form-multi-select-dropdown', {
                        show: portal && isOpen,
                    }), onKeyDown: handleGlobalSearch, role: "menu", ref: dropdownMenuElement },
                    multiple && selectAll && (React.createElement("button", { type: "button", className: "form-multi-select-all", onClick: function () { return handleSelectAll(); } }, selectAllLabel)),
                    React.createElement(CMultiSelectOptions.CMultiSelectOptions, { loading: loading, onOptionOnClick: function (option) { return !disabled && handleOnOptionClick(option); }, options: filteredOptions.length === 0 && allowCreateOptions
                            ? userOption || []
                            : filteredOptions, optionsMaxHeight: optionsMaxHeight, optionsStyle: optionsStyle, optionsTemplate: optionsTemplate, optionsGroupsTemplate: optionsGroupsTemplate, searchNoResultsLabel: searchNoResultsLabel, selected: selected, virtualScroller: virtualScroller, visibleItems: visibleItems }))))));
});
CMultiSelect.propTypes = tslib_es6.__assign({ allowCreateOptions: PropTypes.bool, ariaCleanerLabel: PropTypes.string, className: PropTypes.string, cleaner: PropTypes.bool, clearSearchOnSelect: PropTypes.bool, container: PropTypes.any, disabled: PropTypes.bool, loading: PropTypes.bool, multiple: PropTypes.bool, name: PropTypes.string, onChange: PropTypes.func, onFilterChange: PropTypes.func, onHide: PropTypes.func, onShow: PropTypes.func, options: PropTypes.array.isRequired, optionsMaxHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), optionsStyle: PropTypes.oneOf(['checkbox', 'text']), optionsTemplate: PropTypes.func, optionsGroupsTemplate: PropTypes.func, placeholder: PropTypes.string, portal: PropTypes.bool, required: PropTypes.bool, resetSelectionOnOptionsChange: PropTypes.bool, search: PropTypes.oneOfType([
        PropTypes.bool,
        PropTypes.oneOf(['external', 'global']),
        PropTypes.shape({
            external: PropTypes.bool.isRequired,
            global: PropTypes.bool.isRequired,
        }),
    ]), searchNoResultsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]), selectAll: PropTypes.bool, selectAllLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]), selectionType: PropTypes.oneOf(['counter', 'tags', 'text']), selectionTypeCounterText: PropTypes.string, size: PropTypes.oneOf(['sm', 'lg']), virtualScroller: PropTypes.bool, visible: PropTypes.bool, visibleItems: PropTypes.number }, CFormControlWrapper.CFormControlWrapper.propTypes);
CMultiSelect.displayName = 'CMultiSelect';

exports.CMultiSelect = CMultiSelect;
//# sourceMappingURL=CMultiSelect.js.map
