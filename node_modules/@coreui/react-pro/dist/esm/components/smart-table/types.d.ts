import { ReactNode } from 'react';
import { CTableDataCellProps } from '../table/CTableDataCell';
import { CTableHeaderCellProps } from '../table/CTableHeaderCell';
import { CTableRowProps } from '../table/CTableRow';
export type Column = {
    children?: Column[];
    filter?: boolean | ((values: any[], onChange: (value: any) => void, state: ColumnFilterValue | undefined) => ReactNode);
    group?: string;
    key: string;
    label?: string;
    sorter?: boolean | ((a: any, b: any) => number);
    _style?: any;
    _props?: CTableHeaderCellProps;
    _colStyle?: any;
    _colProps?: CTableDataCellProps;
};
export type ColumnFilter = {
    lazy?: boolean;
    external?: boolean;
};
export type ColumnFilterValue = {
    [key: string]: any;
};
export type FooterItem = {
    label?: string;
    _props?: CTableDataCellProps;
};
export type Group = {
    children?: Group[] | Column[];
    colspan?: number;
    deep?: number;
    group?: string;
    key: string;
    label?: string;
    _style?: any;
    _props?: CTableHeaderCellProps;
};
export type Item = {
    [key: string]: number | string | any;
    _cellProps?: any;
    _props?: CTableRowProps;
    _selectable?: boolean;
    _selected?: boolean;
};
export type ItemsPerPageSelect = {
    external?: boolean;
};
export type Pagination = {
    external?: boolean;
};
export type Sorter = {
    external?: boolean;
    multiple?: boolean;
    resetable?: boolean;
};
export type ScopedColumns = {
    [key: string]: any;
    details?: (a: Item, b: number) => ReactNode;
};
export type SorterValue = {
    column: string;
    state: 'asc' | 'desc' | 0;
};
export type TableFilter = {
    lazy?: boolean;
    external?: boolean;
};
