'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');
var React = require('react');
var CButton = require('../button/CButton.js');

var CCalendarNavigation = React.forwardRef(function (_a, ref) {
    var ariaNavNextMonthLabel = _a.ariaNavNextMonthLabel, ariaNavNextYearLabel = _a.ariaNavNextYearLabel, ariaNavPrevMonthLabel = _a.ariaNavPrevMonthLabel, ariaNavPrevYearLabel = _a.ariaNavPrevYearLabel, calendarDate = _a.calendarDate, locale = _a.locale, navigation = _a.navigation, navNextDoubleIcon = _a.navNextDoubleIcon, navNextIcon = _a.navNextIcon, navPrevDoubleIcon = _a.navPrevDoubleIcon, navPrevIcon = _a.navPrevIcon, navYearFirst = _a.navYearFirst, onMonthClick = _a.onMonthClick, onNavigationClick = _a.onNavigationClick, onYearClick = _a.onYearClick, view = _a.view;
    return (React.createElement("div", { className: "calendar-nav", ref: ref },
        navigation && (React.createElement("div", { className: "calendar-nav-prev" },
            React.createElement(CButton.CButton, { color: "transparent", size: "sm", "aria-label": ariaNavPrevYearLabel, onClick: function () { return onNavigationClick('prev', true); } }, navPrevDoubleIcon !== null && navPrevDoubleIcon !== void 0 ? navPrevDoubleIcon : (React.createElement("span", { className: "calendar-nav-icon calendar-nav-icon-double-prev" }))),
            view === 'days' && (React.createElement(CButton.CButton, { color: "transparent", size: "sm", "aria-label": ariaNavPrevMonthLabel, onClick: function () { return onNavigationClick('prev'); } }, navPrevIcon !== null && navPrevIcon !== void 0 ? navPrevIcon : React.createElement("span", { className: "calendar-nav-icon calendar-nav-icon-prev" }))))),
        React.createElement("div", tslib_es6.__assign({ className: "calendar-nav-date", "aria-live": "polite" }, (navYearFirst && { style: { display: 'flex', justifyContent: 'center' } })),
            view === 'days' && (React.createElement(CButton.CButton, { color: "transparent", size: "sm", onClick: function () { return navigation && onMonthClick(); } }, calendarDate && calendarDate.toLocaleDateString(locale, { month: 'long' }))),
            React.createElement(CButton.CButton, tslib_es6.__assign({ color: "transparent", size: "sm", onClick: function () { return navigation && onYearClick(); } }, (navYearFirst && { style: { order: '-1' } })), calendarDate && calendarDate.toLocaleDateString(locale, { year: 'numeric' }))),
        navigation && (React.createElement("div", { className: "calendar-nav-next" },
            view === 'days' && (React.createElement(CButton.CButton, { color: "transparent", size: "sm", "aria-label": ariaNavNextMonthLabel, onClick: function () { return onNavigationClick('next'); } }, navNextIcon !== null && navNextIcon !== void 0 ? navNextIcon : React.createElement("span", { className: "calendar-nav-icon calendar-nav-icon-next" }))),
            React.createElement(CButton.CButton, { color: "transparent", size: "sm", "aria-label": ariaNavNextYearLabel, onClick: function () { return onNavigationClick('next', true); } }, navNextDoubleIcon !== null && navNextDoubleIcon !== void 0 ? navNextDoubleIcon : (React.createElement("span", { className: "calendar-nav-icon calendar-nav-icon-double-next" })))))));
});
CCalendarNavigation.displayName = 'CCalendarNavigation';

exports.CCalendarNavigation = CCalendarNavigation;
//# sourceMappingURL=CCalendarNavigation.js.map
